[
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HTTPRequest",
        "kind": 6,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "class HTTPRequest:\n    def __init__(self, data):\n        self.method, self.path, self.protocol = None, None, None\n        self.headers, self.body = {}, \"\"\n        self.parse(data)\n    def parse(self, data):\n        lines = data.split(\"\\r\\n\")\n        self.method, self.path, self.protocol = lines[0].split(\" \")\n        header_lines = lines[1:]\n        body_started = False",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "class HTTPResponse:\n    def __init__(self, status_code=200, reason=\"OK\", headers=None, body=\"\"):\n        if headers is None:\n            headers = {}\n        self.status_code = status_code\n        self.reason = reason\n        self.headers = headers\n        self.body = body\n    def build(self):\n        response_line = f\"HTTP/1.1 {self.status_code} {self.reason}\\r\\n\"",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "handle_request",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def handle_request(request_data):\n    request = HTTPRequest(request_data)\n    if request.method == \"GET\" and request.path == \"/\":\n        return HTTPResponse().build()\n    if request.method == \"GET\" and request.path == \"/user-agent\":\n        user_agent = request.headers.get(\"User-Agent\", \"\")\n        return HTTPResponse(\n            headers={\"Content-Type\": \"text/plain\", \"Content-Length\": str(len(user_agent))},\n            body=user_agent\n        ).build()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "client_handler",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def client_handler(client):\n    try:\n        data = client.recv(1024).decode().strip()\n        if data:\n            response = handle_request(data)\n            client.send(response.encode())\n    finally:\n        client.close()\ndef main():\n    server_socket = socket.create_server((\"localhost\", 4221), reuse_port=True)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def main():\n    server_socket = socket.create_server((\"localhost\", 4221), reuse_port=True)\n    server_socket.listen()\n    while True:\n        client, _ = server_socket.accept()\n        threading.Thread(target=client_handler, args=(client,)).start()\nif __name__ == \"__main__\":\n    main()",
        "detail": "app.main",
        "documentation": {}
    }
]